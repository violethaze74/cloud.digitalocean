#!/bin/bash

# set parameters
ISOBASE="bio-linux"
HOME=/home/manager
#BURNISO="n"
DEVICE=/dev/sr1
#symbolic link to the actual working directory
export ROOT=$HOME/reconstructor

askyn() {
    # eg. askyn BURNISO "Make an ISO?" n
    eval def='${'"$1"':-}'
    if [ "$def" = "y" -o "$def" = "n" ] ; then
	echo "$2 - $def"
    else
	yn= ; ny=
	if [ "${3:-}" = y ] ; then
	    def=y
	    echo -n "$2 [Y|n] "
	else
	    def=n
	    echo -n "$2 [y|N] "
	fi
	if [ yn = 'n' -o yn = 'N' ] ; then
	    yn=n
	elif [ yn = 'y' -o yn = 'Y' ] ; then
	    yn=y
	else
	    yn=$def
	fi
	eval "$1"=$yn
    fi
}

# check command-line args
if [ $# == 1 ]; then
    RELEASE=$1
#    VERSION=${BASEVERSION}.${RELEASE}${BETA}
    VERSION=$1
    export VERSION # For recon.test.d scripts
    ISO="${ISOBASE}-${VERSION}.iso"
    pathtorecon=`readlink -e "$ROOT"`
    # show preamble
    echo "Creating the Bio-Linux image... $VERSION"
    echo "VERSION:  $VERSION"
    echo "ISO:      $ISO"
    echo "BUILDDIR: $pathtorecon"
    echo
    askyn BURNISO "Do you want to make a USB stick after creating iso?" n
else
    echo "Usage: recon <version#>"
    exit
fi

# There is no earthly reason why stuff in $ROOT/remaster should be root-owned
dufffiles=`find "$ROOT/remaster" -not -uid \`id -u\` -print -quit`
if [ -n "$dufffiles" ] ; then
   echo
   echo "Files in $ROOT/remaster not owned by this user.  Fix ze permissions!"
   echo "$dufffiles"
   exit 1
fi

#Ensure that no stale mounts are left over from chrootings.
mount | grep " on $pathtorecon/root"
if [ $? -eq 0 ] ; then
   echo
   echo "You still have things mounted inside $ROOT.  Use the openchroot"
   echo "script and remember to close it properly."
   echo "Or you may need to reboot the machine."
   exit 1
fi
# record the start time...
START_TIME=`date`;

# Run scripts in ~/recon.test.d - basic regression checks
run-parts --exit-on-error ~/recon.test.d || exit 1

# replace version numbers in the build image
cd $ROOT
#sudo chroot root sed -i "/bio\-linux\.version/s/\".*\"/\"$VERSION\"/" /etc/init.d/biolinuxfirstboot
sudo sh -c "echo \"$VERSION\" > root/etc/bio-linux.version"
# update MOTD manually for now.

#updatedb
echo "=== Running mlocate database update ==="
sudo chroot root/ /etc/cron.daily/mlocate

#rebuild the initrd.gz
echo "=== Building initrd ==="
rm -v $ROOT/remaster/casper/initrd.*

# If there is a new initrd, made by mkinitrd, unpack it and delete it.
newinitrd="`echo $ROOT/root/boot/initrd.img-*`"

if [ -f "$newinitrd" ] ; then
	echo "Extracting new initrd found in $newinitrd "
	sudo rm -rf $ROOT/initrd.old ; mv $ROOT/initrd $ROOT/initrd.old
	mkdir $ROOT/initrd ; cd $ROOT/initrd
	sudo bash -c "zcat $newinitrd | cpio -i"
	if [ ! -d ./lib ] ; then echo "Problem with initrd - please check." ; exit 1 ; fi
	sudo rm $newinitrd
fi

#Similarly for the vmlinuz kernel image, but no need to unpack
newvmlinuz="`echo $ROOT/root/boot/vmlinuz-*.efi.signed`"

if [ -f "$newvmlinuz" ] ; then
    echo "Found new kernel image in $newvmlinuz"

    rm -f "$ROOT/remaster/casper/vmlinuz"
    sudo cat "$newvmlinuz" > "$ROOT/remaster/casper/vmlinuz.efi"
    sudo rm "$newvmlinuz" "$ROOT/root/boot/"`basename "$newvmlinuz" .efi.signed`
fi

cd $ROOT/initrd
echo "Repacking initrd..."
sudo find | cpio -H newc -o | xz -zc --format=lzma > $ROOT/remaster/casper/initrd.lz

#regenerate filesystem.manifest
echo "=== Building filesystem.manifest ==="
cd $ROOT
sudo chroot root/ dpkg-query -W --showformat='${Package} ${Version}\n' > \
    $ROOT/remaster/casper/filesystem.manifest
echo `wc -l $ROOT/remaster/casper/filesystem.manifest`" packages logged"

#if squashfs exists remove it
echo "=== Building squashfs ==="
cd $ROOT
if [ -f remaster/casper/filesystem.squashfs ]; then
    #echo Removing old filesystem.squashfs...
    rm -f remaster/casper/filesystem.squashfs
fi

sudo mksquashfs root remaster/casper/filesystem.squashfs
sudo chown --reference=remaster/casper remaster/casper/filesystem.squashfs

#Calculate filesystem.size, which appears to be approx the total size of the squshfs
#plus 300_000_000.  I'm not sure how they actually calculate it, but this method
#seems to be faster than anything involving du and asking unsquashfs for a summary
#does not reveal the uncompressed size.
echo "=== Fixing filesystem.size ==="
unsquashfs -lls remaster/casper/filesystem.squashfs | tail -n+4 |\
	perl -ne '$s+=(split(/\s+/))[2];print STDERR "." unless $.%5000;END{print $s+300_000_000}' 2>&1 >\
	remaster/casper/filesystem.size
echo DONE

# Create iso
echo "=== Creating iso ==="
# add disc id
echo "Bio-Linux was created by NEBC" > $ROOT/remaster/.disc_id
# Update md5sums
cd $ROOT/remaster
# Remove old md5sum.txt file first
rm -f md5sum.txt
# Generate the md5sums
find . -type f -print0 | xargs -0 md5sum > md5sum.txt
# Clean up the boot.cat and  md5sum.txt - tis broken for some reason (see Tim's notes on MT)
sed -i -e '/md5sum.txt/d' -e '/boot.cat/d' md5sum.txt

# remove existing iso (if it exists)
if [ -f $HOME/$ISO ]; then 
    echo "Removing old iso..."
    rm -f $HOME/$ISO
fi

cd $ROOT
# architecture is x86
#echo "=== Building ISO for x86 ==="
mkisofs -o $HOME/$ISO -b isolinux/isolinux.bin -c isolinux/boot.cat -input-charset utf-8 -no-emul-boot -boot-load-size 4 \
  -boot-info-table -V "Bio-Linux Live DVD" -cache-inodes -r -J -l remaster

echo "Finished creating image"

# Do we need to burn the iso?
#if [[ $BURNISO == "y" ]] ; then 
#    echo "Burning the iso to DVD..." 
#    #sleep 10; # just for good measure
#    /usr/bin/growisofs -dvd-compat -Z ${DEVICE}=${HOME}/${ISO}
#fi

if [ "$BURNISO" = "y" ] ; then
     echo "Starting USB maker..."
     sudo env REMASTER_ISO="${HOME}/${ISO}" BLUM_ALLOW_QUICK_MODE=0 BLUM_ASSUME_YES=1 ~/bin/bio-linux-usb-maker
fi

# record the end time...
END_TIME=`date`;

echo
echo "Time taken..."
echo "start: $START_TIME"
echo "end:   $END_TIME"
echo

if [ "$BURNISO" = "y" ] ; then
    echo "Please check the disk for errors before use!"
fi
echo "Done"
exit 0    
